/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedSubscribedRouteImport } from './routes/_authenticated/_subscribed'
import { Route as AuthenticatedSubscribedPremiumFeatureRouteImport } from './routes/_authenticated/_subscribed/premium-feature'
import { Route as AuthenticatedDemoStartServerFuncsRouteImport } from './routes/_authenticated/demo.start.server-funcs'
import { Route as AuthenticatedDemoTanstackQueryRouteImport } from './routes/_authenticated/demo.tanstack-query'
import { Route as AuthenticatedSubscriptionRequiredRouteImport } from './routes/_authenticated/subscription-required'
import { Route as IndexRouteImport } from './routes/index'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedSubscriptionRequiredRoute =
  AuthenticatedSubscriptionRequiredRouteImport.update({
    id: '/subscription-required',
    path: '/subscription-required',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedSubscribedRoute = AuthenticatedSubscribedRouteImport.update({
  id: '/_subscribed',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/_auth/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedDemoTanstackQueryRoute =
  AuthenticatedDemoTanstackQueryRouteImport.update({
    id: '/demo/tanstack-query',
    path: '/demo/tanstack-query',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedSubscribedPremiumFeatureRoute =
  AuthenticatedSubscribedPremiumFeatureRouteImport.update({
    id: '/premium-feature',
    path: '/premium-feature',
    getParentRoute: () => AuthenticatedSubscribedRoute,
  } as any)
const AuthenticatedDemoStartServerFuncsRoute =
  AuthenticatedDemoStartServerFuncsRouteImport.update({
    id: '/demo/start/server-funcs',
    path: '/demo/start/server-funcs',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof AuthLoginRoute
  '/subscription-required': typeof AuthenticatedSubscriptionRequiredRoute
  '/premium-feature': typeof AuthenticatedSubscribedPremiumFeatureRoute
  '/demo/tanstack-query': typeof AuthenticatedDemoTanstackQueryRoute
  '/demo/start/server-funcs': typeof AuthenticatedDemoStartServerFuncsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof AuthLoginRoute
  '/subscription-required': typeof AuthenticatedSubscriptionRequiredRoute
  '/premium-feature': typeof AuthenticatedSubscribedPremiumFeatureRoute
  '/demo/tanstack-query': typeof AuthenticatedDemoTanstackQueryRoute
  '/demo/start/server-funcs': typeof AuthenticatedDemoStartServerFuncsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_authenticated/_subscribed': typeof AuthenticatedSubscribedRouteWithChildren
  '/_authenticated/subscription-required': typeof AuthenticatedSubscriptionRequiredRoute
  '/_authenticated/_subscribed/premium-feature': typeof AuthenticatedSubscribedPremiumFeatureRoute
  '/_authenticated/demo/tanstack-query': typeof AuthenticatedDemoTanstackQueryRoute
  '/_authenticated/demo/start/server-funcs': typeof AuthenticatedDemoStartServerFuncsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/subscription-required'
    | '/premium-feature'
    | '/demo/tanstack-query'
    | '/demo/start/server-funcs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/subscription-required'
    | '/premium-feature'
    | '/demo/tanstack-query'
    | '/demo/start/server-funcs'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_auth/login'
    | '/_authenticated/_subscribed'
    | '/_authenticated/subscription-required'
    | '/_authenticated/_subscribed/premium-feature'
    | '/_authenticated/demo/tanstack-query'
    | '/_authenticated/demo/start/server-funcs'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/subscription-required': {
      id: '/_authenticated/subscription-required'
      path: '/subscription-required'
      fullPath: '/subscription-required'
      preLoaderRoute: typeof AuthenticatedSubscriptionRequiredRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/_subscribed': {
      id: '/_authenticated/_subscribed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedSubscribedRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/demo/tanstack-query': {
      id: '/_authenticated/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof AuthenticatedDemoTanstackQueryRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/_subscribed/premium-feature': {
      id: '/_authenticated/_subscribed/premium-feature'
      path: '/premium-feature'
      fullPath: '/premium-feature'
      preLoaderRoute: typeof AuthenticatedSubscribedPremiumFeatureRouteImport
      parentRoute: typeof AuthenticatedSubscribedRoute
    }
    '/_authenticated/demo/start/server-funcs': {
      id: '/_authenticated/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof AuthenticatedDemoStartServerFuncsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedSubscribedRouteChildren {
  AuthenticatedSubscribedPremiumFeatureRoute: typeof AuthenticatedSubscribedPremiumFeatureRoute
}

const AuthenticatedSubscribedRouteChildren: AuthenticatedSubscribedRouteChildren =
  {
    AuthenticatedSubscribedPremiumFeatureRoute:
      AuthenticatedSubscribedPremiumFeatureRoute,
  }

const AuthenticatedSubscribedRouteWithChildren =
  AuthenticatedSubscribedRoute._addFileChildren(
    AuthenticatedSubscribedRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedSubscribedRoute: typeof AuthenticatedSubscribedRouteWithChildren
  AuthenticatedSubscriptionRequiredRoute: typeof AuthenticatedSubscriptionRequiredRoute
  AuthenticatedDemoTanstackQueryRoute: typeof AuthenticatedDemoTanstackQueryRoute
  AuthenticatedDemoStartServerFuncsRoute: typeof AuthenticatedDemoStartServerFuncsRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedSubscribedRoute: AuthenticatedSubscribedRouteWithChildren,
  AuthenticatedSubscriptionRequiredRoute:
    AuthenticatedSubscriptionRequiredRoute,
  AuthenticatedDemoTanstackQueryRoute: AuthenticatedDemoTanstackQueryRoute,
  AuthenticatedDemoStartServerFuncsRoute:
    AuthenticatedDemoStartServerFuncsRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { createStart } from '@tanstack/react-start'
import type { getRouter } from './router.tsx'

declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
